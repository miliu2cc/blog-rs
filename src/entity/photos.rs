//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1



use sea_orm :: entity :: prelude :: * ; use serde :: { Deserialize , Serialize } ;

# [derive (Clone , Debug , PartialEq , DeriveEntityModel , Eq , Serialize , Deserialize)] # [sea_orm (table_name = "photos")] pub struct Model { # [sea_orm (primary_key)] pub id : i32 , pub album_id : i32 , pub image_url : String , pub created_at : Option < DateTimeUtc > , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveRelation)] pub enum Relation { # [sea_orm (belongs_to = "super::albums::Entity" , from = "Column::AlbumId" , to = "super::albums::Column::Id" , on_update = "Restrict" , on_delete = "Cascade" ,)] Albums , }

impl Related < super :: albums :: Entity > for Entity { fn to () -> RelationDef { Relation :: Albums . def () } }

impl ActiveModelBehavior for ActiveModel { }