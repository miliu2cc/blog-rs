//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1



use sea_orm :: entity :: prelude :: * ; use serde :: { Deserialize , Serialize } ;

# [derive (Clone , Debug , PartialEq , DeriveEntityModel , Eq , Serialize , Deserialize)] # [sea_orm (table_name = "tags")] pub struct Model { # [sea_orm (primary_key)] pub id : i32 , # [sea_orm (unique)] pub name : String , pub created_at : Option < DateTimeUtc > , pub updated_at : Option < DateTimeUtc > , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveRelation)] pub enum Relation { # [sea_orm (has_many = "super::article_tags::Entity")] ArticleTags , }

impl Related < super :: article_tags :: Entity > for Entity { fn to () -> RelationDef { Relation :: ArticleTags . def () } }

impl Related < super :: articles :: Entity > for Entity { fn to () -> RelationDef { super :: article_tags :: Relation :: Articles . def () } fn via () -> Option < RelationDef > { Some (super :: article_tags :: Relation :: Tags . def () . rev ()) } }

impl ActiveModelBehavior for ActiveModel { }