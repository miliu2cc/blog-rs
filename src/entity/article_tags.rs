//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1



use sea_orm :: entity :: prelude :: * ; use serde :: { Deserialize , Serialize } ;

# [derive (Clone , Debug , PartialEq , DeriveEntityModel , Eq , Serialize , Deserialize)] # [sea_orm (table_name = "article_tags")] pub struct Model { # [sea_orm (primary_key , auto_increment = false)] pub article_id : i32 , # [sea_orm (primary_key , auto_increment = false)] pub tag_id : i32 , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveRelation)] pub enum Relation { # [sea_orm (belongs_to = "super::articles::Entity" , from = "Column::ArticleId" , to = "super::articles::Column::Id" , on_update = "Restrict" , on_delete = "Cascade" ,)] Articles , # [sea_orm (belongs_to = "super::tags::Entity" , from = "Column::TagId" , to = "super::tags::Column::Id" , on_update = "Restrict" , on_delete = "Cascade" ,)] Tags , }

impl Related < super :: articles :: Entity > for Entity { fn to () -> RelationDef { Relation :: Articles . def () } }

impl Related < super :: tags :: Entity > for Entity { fn to () -> RelationDef { Relation :: Tags . def () } }

impl ActiveModelBehavior for ActiveModel { }